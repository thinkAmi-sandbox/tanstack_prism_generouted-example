/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Apple
 */
export interface Apple {
    /**
     * 
     * @type {number}
     * @memberof Apple
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Apple
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Apple
     */
    'colorId'?: number;
}
/**
 * 
 * @export
 * @interface ApplesResponse
 */
export interface ApplesResponse {
    /**
     * 
     * @type {Array<Apple>}
     * @memberof ApplesResponse
     */
    'apples': Array<Apple>;
}
/**
 * 
 * @export
 * @interface Color
 */
export interface Color {
    /**
     * 
     * @type {number}
     * @memberof Color
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    'colorName': string;
}
/**
 * 
 * @export
 * @interface Fish
 */
export interface Fish {
    /**
     * 
     * @type {number}
     * @memberof Fish
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Fish
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface FishParams
 */
export interface FishParams {
    /**
     * 
     * @type {string}
     * @memberof FishParams
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface FishesGetResponse
 */
export interface FishesGetResponse {
    /**
     * 
     * @type {Array<Fish>}
     * @memberof FishesGetResponse
     */
    'fishes': Array<Fish>;
}
/**
 * 
 * @export
 * @interface FishesPostResponse
 */
export interface FishesPostResponse {
    /**
     * 
     * @type {Fish}
     * @memberof FishesPostResponse
     */
    'fish': Fish;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FishParams} [fishParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFish: async (fishParams?: FishParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fishes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fishParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchApples: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} colorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColor: async (colorId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'colorId' is not null or undefined
            assertParamExists('fetchColor', 'colorId', colorId)
            const localVarPath = `/color/{colorId}`
                .replace(`{${"colorId"}}`, encodeURIComponent(String(colorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFishes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fishes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FishParams} [fishParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFish(fishParams?: FishParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FishesPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFish(fishParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchApples(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchApples(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} colorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColor(colorId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Color>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchColor(colorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchFishes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FishesGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFishes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {FishParams} [fishParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFish(fishParams?: FishParams, options?: any): AxiosPromise<FishesPostResponse> {
            return localVarFp.createFish(fishParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchApples(options?: any): AxiosPromise<ApplesResponse> {
            return localVarFp.fetchApples(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} colorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColor(colorId: number, options?: any): AxiosPromise<Color> {
            return localVarFp.fetchColor(colorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFishes(options?: any): AxiosPromise<FishesGetResponse> {
            return localVarFp.fetchFishes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {FishParams} [fishParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createFish(fishParams?: FishParams, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createFish(fishParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchApples(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchApples(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} colorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchColor(colorId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchColor(colorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchFishes(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchFishes(options).then((request) => request(this.axios, this.basePath));
    }
}


